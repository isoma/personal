;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.0
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cl:defconstant EB_HOOK_NULL -1)

(cl:defconstant EB_HOOK_INITIALIZE 0)

(cl:defconstant EB_HOOK_BEGIN_NARROW 1)

(cl:defconstant EB_HOOK_END_NARROW 2)

(cl:defconstant EB_HOOK_BEGIN_SUBSCRIPT 3)

(cl:defconstant EB_HOOK_END_SUBSCRIPT 4)

(cl:defconstant EB_HOOK_SET_INDENT 5)

(cl:defconstant EB_HOOK_NEWLINE 6)

(cl:defconstant EB_HOOK_BEGIN_SUPERSCRIPT 7)

(cl:defconstant EB_HOOK_END_SUPERSCRIPT 8)

(cl:defconstant EB_HOOK_BEGIN_NO_NEWLINE 9)

(cl:defconstant EB_HOOK_END_NO_NEWLINE 10)

(cl:defconstant EB_HOOK_BEGIN_EMPHASIS 11)

(cl:defconstant EB_HOOK_END_EMPHASIS 12)

(cl:defconstant EB_HOOK_BEGIN_CANDIDATE 13)

(cl:defconstant EB_HOOK_END_CANDIDATE_GROUP 14)

(cl:defconstant EB_HOOK_END_CANDIDATE_LEAF 15)

(cl:defconstant EB_HOOK_BEGIN_REFERENCE 16)

(cl:defconstant EB_HOOK_END_REFERENCE 17)

(cl:defconstant EB_HOOK_BEGIN_KEYWORD 18)

(cl:defconstant EB_HOOK_END_KEYWORD 19)

(cl:defconstant EB_HOOK_NARROW_FONT 20)

(cl:defconstant EB_HOOK_WIDE_FONT 21)

(cl:defconstant EB_HOOK_ISO8859_1 22)

(cl:defconstant EB_HOOK_NARROW_JISX0208 23)

(cl:defconstant EB_HOOK_WIDE_JISX0208 24)

(cl:defconstant EB_HOOK_GB2312 25)

(cl:defconstant EB_HOOK_BEGIN_MONO_GRAPHIC 26)

(cl:defconstant EB_HOOK_END_MONO_GRAPHIC 27)

(cl:defconstant EB_HOOK_BEGIN_GRAY_GRAPHIC 28)

(cl:defconstant EB_HOOK_END_GRAY_GRAPHIC 29)

(cl:defconstant EB_HOOK_BEGIN_COLOR_BMP 30)

(cl:defconstant EB_HOOK_BEGIN_COLOR_JPEG 31)

(cl:defconstant EB_HOOK_BEGIN_IN_COLOR_BMP 32)

(cl:defconstant EB_HOOK_BEGIN_IN_COLOR_JPEG 33)

(cl:defconstant EB_HOOK_END_COLOR_GRAPHIC 34)

(cl:defconstant EB_HOOK_END_IN_COLOR_GRAPHIC 35)

(cl:defconstant EB_HOOK_BEGIN_WAVE 36)

(cl:defconstant EB_HOOK_END_WAVE 37)

(cl:defconstant EB_HOOK_BEGIN_MPEG 38)

(cl:defconstant EB_HOOK_END_MPEG 39)

(cl:defconstant EB_HOOK_BEGIN_GRAPHIC_REFERENCE 40)

(cl:defconstant EB_HOOK_END_GRAPHIC_REFERENCE 41)

(cl:defconstant EB_HOOK_GRAPHIC_REFERENCE 42)

(cl:defconstant EB_HOOK_BEGIN_DECORATION 43)

(cl:defconstant EB_HOOK_END_DECORATION 44)

(cl:defconstant EB_HOOK_BEGIN_IMAGE_PAGE 45)

(cl:defconstant EB_HOOK_END_IMAGE_PAGE 46)

(cl:defconstant EB_HOOK_BEGIN_CLICKABLE_AREA 47)

(cl:defconstant EB_HOOK_END_CLICKABLE_AREA 48)

(cffi:defcfun ("eb_initialize_hookset" eb_initialize_hookset) :void
  (hookset :pointer))

(cffi:defcfun ("eb_finalize_hookset" eb_finalize_hookset) :void
  (hookset :pointer))

(cffi:defcfun ("eb_set_hook" eb_set_hook) :pointer
  (hookset :pointer)
  (hook :pointer))

(cffi:defcfun ("eb_set_hooks" eb_set_hooks) :pointer
  (hookset :pointer)
  (hook :pointer))

(cffi:defcfun ("eb_hook_euc_to_ascii" eb_hook_euc_to_ascii) :pointer
  (book :pointer)
  (appendix :pointer)
  (container :pointer)
  (hook_code :pointer)
  (argc :int)
  (argv :pointer))

(cffi:defcfun ("eb_hook_stop_code" eb_hook_stop_code) :pointer
  (book :pointer)
  (appendix :pointer)
  (container :pointer)
  (hook_code :pointer)
  (argc :int)
  (argv :pointer))

(cffi:defcfun ("eb_hook_narrow_character_text" eb_hook_narrow_character_text) :pointer
  (book :pointer)
  (appendix :pointer)
  (container :pointer)
  (hook_code :pointer)
  (argc :int)
  (argv :pointer))

(cffi:defcfun ("eb_hook_wide_character_text" eb_hook_wide_character_text) :pointer
  (book :pointer)
  (appendix :pointer)
  (container :pointer)
  (hook_code :pointer)
  (argc :int)
  (argv :pointer))

(cffi:defcfun ("eb_hook_newline" eb_hook_newline) :pointer
  (book :pointer)
  (appendix :pointer)
  (container :pointer)
  (hook_code :pointer)
  (argc :int)
  (argv :pointer))

(cffi:defcfun ("eb_hook_empty" eb_hook_empty) :pointer
  (book :pointer)
  (appendix :pointer)
  (container :pointer)
  (hook_code :pointer)
  (argc :int)
  (argv :pointer))

(cffi:defcfun ("eb_seek_text" eb_seek_text) :pointer
  (book :pointer)
  (position :pointer))

(cffi:defcfun ("eb_tell_text" eb_tell_text) :pointer
  (book :pointer)
  (position :pointer))

(cffi:defcfun ("eb_read_text" eb_read_text) :pointer
  (book :pointer)
  (appendix :pointer)
  (hookset :pointer)
  (container :pointer)
  (text_max_length :pointer)
  (text :string)
  (text_length :pointer))

(cffi:defcfun ("eb_read_heading" eb_read_heading) :pointer
  (book :pointer)
  (appendix :pointer)
  (hookset :pointer)
  (container :pointer)
  (text_max_length :pointer)
  (text :string)
  (text_length :pointer))

(cffi:defcfun ("eb_read_rawtext" eb_read_rawtext) :pointer
  (book :pointer)
  (text_max_length :pointer)
  (text :string)
  (text_length :pointer))

(cffi:defcfun ("eb_is_text_stopped" eb_is_text_stopped) :int
  (book :pointer))

(cffi:defcfun ("eb_write_text_byte1" eb_write_text_byte1) :pointer
  (book :pointer)
  (byte1 :int))

(cffi:defcfun ("eb_write_text_byte2" eb_write_text_byte2) :pointer
  (book :pointer)
  (byte1 :int)
  (byte2 :int))

(cffi:defcfun ("eb_write_text_string" eb_write_text_string) :pointer
  (book :pointer)
  (string :string))

(cffi:defcfun ("eb_write_text" eb_write_text) :pointer
  (book :pointer)
  (stream :string)
  (stream_length :pointer))

(cffi:defcfun ("eb_current_candidate" eb_current_candidate) :string
  (book :pointer))

(cffi:defcfun ("eb_forward_text" eb_forward_text) :pointer
  (book :pointer)
  (appendix :pointer))

(cffi:defcfun ("eb_backward_text" eb_backward_text) :pointer
  (book :pointer)
  (appendix :pointer))



;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.0
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cl:defconstant EB_DISC_EB 0)

(cl:defconstant EB_DISC_EPWING 1)

(cl:defconstant EB_DISC_INVALID -1)

(cl:defconstant EB_CHARCODE_ISO8859_1 1)

(cl:defconstant EB_CHARCODE_JISX0208 2)

(cl:defconstant EB_CHARCODE_JISX0208_GB2312 3)

(cl:defconstant EB_CHARCODE_INVALID -1)

(cl:defconstant EB_BOOK_NONE -1)

(cl:defconstant EB_SUBBOOK_INVALID -1)

(cl:defconstant EB_MULTI_INVALID -1)

(cl:defconstant EB_SIZE_PAGE 2048)

(cl:defconstant EB_MAX_WORD_LENGTH 255)

(cl:defconstant EB_MAX_EB_TITLE_LENGTH 30)

(cl:defconstant EB_MAX_EPWING_TITLE_LENGTH 80)

(cl:defconstant EB_MAX_TITLE_LENGTH 80)

(cl:defconstant EB_MAX_PATH_LENGTH 1024)

(cl:defconstant EB_MAX_DIRECTORY_NAME_LENGTH 8)

(cl:defconstant EB_MAX_FILE_NAME_LENGTH 14)

(cl:defconstant EB_MAX_MULTI_LABEL_LENGTH 30)

(cl:defconstant EB_MAX_ALTERNATION_TEXT_LENGTH 31)

(cl:defconstant EB_MAX_MULTI_TITLE_LENGTH 32)

(cl:defconstant EB_MAX_FONTS 4)

(cl:defconstant EB_MAX_SUBBOOKS 50)

(cl:defconstant EB_MAX_MULTI_SEARCHES 10)

(cl:defconstant EB_MAX_MULTI_ENTRIES 5)

(cl:defconstant EB_MAX_KEYWORDS 5)

(cl:defconstant EB_MAX_CROSS_ENTRIES 5)

(cl:defconstant EB_MAX_ALTERNATION_CACHE 16)

(cl:defconstant EB_NUMBER_OF_HOOKS 49)

(cl:defconstant EB_NUMBER_OF_SEARCH_CONTEXTS 5)

(cffi:defcstruct EB_Position_Struct
	(page :int)
	(offset :int))

(cffi:defcstruct EB_Alternation_Cache_Struct
	(character_number :int)
	(text :pointer))

(cffi:defcstruct EB_Appendix_Subbook_Struct
	(initialized :int)
	(code :int)
	(directory_name :pointer)
	(data_directory_name :pointer)
	(file_name :pointer)
	(character_code :int)
	(narrow_start :int)
	(wide_start :int)
	(narrow_end :int)
	(wide_end :int)
	(narrow_page :int)
	(wide_page :int)
	(stop_code0 :int)
	(stop_code1 :int)
	(zio :pointer))

(cffi:defcstruct EB_Appendix_Struct
	(code :int)
	(path :string)
	(path_length :pointer)
	(disc_code :int)
	(subbook_count :int)
	(subbooks :pointer)
	(subbook_current :pointer)
	(narrow_cache :pointer)
	(wide_cache :pointer))

(cffi:defcstruct EB_Font_Struct
	(font_code :int)
	(initialized :int)
	(start :int)
	(end :int)
	(page :int)
	(file_name :pointer)
	(glyphs :string)
	(zio :pointer))

(cffi:defcstruct EB_Search_Struct
	(index_id :int)
	(start_page :int)
	(end_page :int)
	(candidates_page :int)
	(katakana :int)
	(lower :int)
	(mark :int)
	(long_vowel :int)
	(double_consonant :int)
	(contracted_sound :int)
	(voiced_consonant :int)
	(small_vowel :int)
	(p_sound :int)
	(space :int)
	(label :pointer))

(cffi:defcstruct EB_Multi_Search_Struct
	(search EB_Search_Struct)
	(title :pointer)
	(entry_count :int)
	(entries :pointer))

(cffi:defcstruct EB_Subbook_Struct
	(initialized :int)
	(index_page :int)
	(code :int)
	(text_zio :pointer)
	(graphic_zio :pointer)
	(sound_zio :pointer)
	(movie_zio :pointer)
	(title :pointer)
	(directory_name :pointer)
	(data_directory_name :pointer)
	(gaiji_directory_name :pointer)
	(movie_directory_name :pointer)
	(text_file_name :pointer)
	(graphic_file_name :pointer)
	(sound_file_name :pointer)
	(text_hint_zio_code :pointer)
	(graphic_hint_zio_code :pointer)
	(sound_hint_zio_code :pointer)
	(search_title_page :int)
	(word_alphabet EB_Search_Struct)
	(word_asis EB_Search_Struct)
	(word_kana EB_Search_Struct)
	(endword_alphabet EB_Search_Struct)
	(endword_asis EB_Search_Struct)
	(endword_kana EB_Search_Struct)
	(keyword EB_Search_Struct)
	(menu EB_Search_Struct)
	(image_menu EB_Search_Struct)
	(cross EB_Search_Struct)
	(copyright EB_Search_Struct)
	(text EB_Search_Struct)
	(sound EB_Search_Struct)
	(multi_count :int)
	(multis :pointer)
	(narrow_fonts :pointer)
	(wide_fonts :pointer)
	(narrow_current :pointer)
	(wide_current :pointer))

(cl:defconstant EB_SIZE_BINARY_CACHE_BUFFER 128)

(cffi:defcstruct EB_Binary_Context_Struct
	(code :int)
	(zio :pointer)
	(location :pointer)
	(size :pointer)
	(offset :pointer)
	(cache_buffer :pointer)
	(cache_length :pointer)
	(cache_offset :pointer)
	(width :int))

(cffi:defcstruct EB_Text_Context_Struct
	(code :int)
	(location :pointer)
	(out :string)
	(out_rest_length :pointer)
	(unprocessed :string)
	(unprocessed_size :pointer)
	(out_step :pointer)
	(narrow_flag :int)
	(printable_count :int)
	(file_end_flag :int)
	(text_status :int)
	(skip_code :int)
	(auto_stop_code :int)
	(candidate :pointer)
	(is_candidate :int))

(cffi:defcstruct EB_Search_Context_Struct
	(code :int)
	(compare_pre :pointer)
	(compare_single :pointer)
	(compare_group :pointer)
	(comparison_result :int)
	(word :pointer)
	(canonicalized_word :pointer)
	(page :int)
	(offset :int)
	(page_id :int)
	(entry_count :int)
	(entry_index :int)
	(entry_length :int)
	(entry_arrangement :int)
	(in_group_entry :int)
	(keyword_heading EB_Position_Struct))

(cffi:defcstruct EB_Book_Struct
	(code :int)
	(disc_code :int)
	(character_code :int)
	(path :string)
	(path_length :pointer)
	(subbook_count :int)
	(subbooks :pointer)
	(subbook_current :pointer)
	(text_context EB_Text_Context_Struct)
	(binary_context EB_Binary_Context_Struct)
	(search_contexts :pointer))

(cffi:defcstruct EB_Hit_Struct
	(heading EB_Position_Struct)
	(text EB_Position_Struct))

(cffi:defcstruct EB_Hook_Struct
	(code :int)
	(function :pointer))

(cffi:defcstruct EB_Hookset_Struct
	(hooks :pointer))

(cffi:defcstruct EB_BookList_Entry
	(name :string)
	(title :string))

(cffi:defcstruct EB_BookList
	(code :int)
	(entry_count :int)
	(max_entry_count :int)
	(entries :pointer))



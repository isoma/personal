;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.0
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cffi:defcfun ("eb_initialize_appendix" eb_initialize_appendix) :void
  (appendix :pointer))

(cffi:defcfun ("eb_finalize_appendix" eb_finalize_appendix) :void
  (appendix :pointer))

(cffi:defcfun ("eb_bind_appendix" eb_bind_appendix) :pointer
  (appendix :pointer)
  (path :string))

(cffi:defcfun ("eb_is_appendix_bound" eb_is_appendix_bound) :int
  (appendix :pointer))

(cffi:defcfun ("eb_appendix_path" eb_appendix_path) :pointer
  (appendix :pointer)
  (path :string))

(cffi:defcfun ("eb_load_all_appendix_subbooks" eb_load_all_appendix_subbooks) :pointer
  (appendix :pointer))

(cffi:defcfun ("eb_appendix_subbook_list" eb_appendix_subbook_list) :pointer
  (appendix :pointer)
  (subbook_list :pointer)
  (subbook_count :pointer))

(cffi:defcfun ("eb_appendix_subbook" eb_appendix_subbook) :pointer
  (appendix :pointer)
  (subbook_code :pointer))

(cffi:defcfun ("eb_appendix_subbook_directory" eb_appendix_subbook_directory) :pointer
  (appendix :pointer)
  (directory :string))

(cffi:defcfun ("eb_appendix_subbook_directory2" eb_appendix_subbook_directory2) :pointer
  (appendix :pointer)
  (subbook_code :pointer)
  (directory :string))

(cffi:defcfun ("eb_set_appendix_subbook" eb_set_appendix_subbook) :pointer
  (appendix :pointer)
  (subbook_code :pointer))

(cffi:defcfun ("eb_unset_appendix_subbook" eb_unset_appendix_subbook) :void
  (appendix :pointer))

(cffi:defcfun ("eb_have_narrow_alt" eb_have_narrow_alt) :int
  (appendix :pointer))

(cffi:defcfun ("eb_narrow_alt_start" eb_narrow_alt_start) :pointer
  (appendix :pointer)
  (start :pointer))

(cffi:defcfun ("eb_narrow_alt_end" eb_narrow_alt_end) :pointer
  (appendix :pointer)
  (end :pointer))

(cffi:defcfun ("eb_narrow_alt_character_text" eb_narrow_alt_character_text) :pointer
  (appendix :pointer)
  (character_number :int)
  (text :string))

(cffi:defcfun ("eb_forward_narrow_alt_character" eb_forward_narrow_alt_character) :pointer
  (appendix :pointer)
  (n :int)
  (character_number :pointer))

(cffi:defcfun ("eb_backward_narrow_alt_character" eb_backward_narrow_alt_character) :pointer
  (appendix :pointer)
  (n :int)
  (character_number :pointer))

(cffi:defcfun ("eb_have_stop_code" eb_have_stop_code) :int
  (appendix :pointer))

(cffi:defcfun ("eb_stop_code" eb_stop_code) :pointer
  (appendix :pointer)
  (arg1 :pointer))

(cffi:defcfun ("eb_have_wide_alt" eb_have_wide_alt) :int
  (appendix :pointer))

(cffi:defcfun ("eb_wide_alt_start" eb_wide_alt_start) :pointer
  (appendix :pointer)
  (start :pointer))

(cffi:defcfun ("eb_wide_alt_end" eb_wide_alt_end) :pointer
  (appendix :pointer)
  (end :pointer))

(cffi:defcfun ("eb_wide_alt_character_text" eb_wide_alt_character_text) :pointer
  (appendix :pointer)
  (character_number :int)
  (text :string))

(cffi:defcfun ("eb_forward_wide_alt_character" eb_forward_wide_alt_character) :pointer
  (appendix :pointer)
  (n :int)
  (character_number :pointer))

(cffi:defcfun ("eb_backward_wide_alt_character" eb_backward_wide_alt_character) :pointer
  (appendix :pointer)
  (n :int)
  (character_number :pointer))



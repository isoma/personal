;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.0
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cl:defconstant ZIO_SIZE_EBZIP_HEADER 22)

(cl:defconstant ZIO_SIZE_EBZIP_MARGIN 1024)

(cl:defconstant ZIO_MAX_EBZIP_LEVEL 5)

(cl:defconstant ZIO_HUFFMAN_NODE_INTERMEDIATE 0)

(cl:defconstant ZIO_HUFFMAN_NODE_EOF 1)

(cl:defconstant ZIO_HUFFMAN_NODE_LEAF8 2)

(cl:defconstant ZIO_HUFFMAN_NODE_LEAF16 3)

(cl:defconstant ZIO_HUFFMAN_NODE_LEAF32 4)

(cl:defconstant ZIO_PLAIN 0)

(cl:defconstant ZIO_EBZIP1 1)

(cl:defconstant ZIO_EPWING 2)

(cl:defconstant ZIO_EPWING6 3)

(cl:defconstant ZIO_SEBXA 4)

(cl:defconstant ZIO_INVALID -1)

(cl:defconstant ZIO_REOPEN -2)

(cffi:defcstruct Zio_Huffman_Node_Struct
	(type :int)
	(value :unsigned-int)
	(frequency :int)
	(left :pointer)
	(right :pointer))

(cffi:defcstruct Zio_Struct
	(id :int)
	(code :int)
	(file :int)
	(location :pointer)
	(file_size :pointer)
	(slice_size :pointer)
	(zip_level :int)
	(index_width :int)
	(crc :unsigned-int)
	(mtime :pointer)
	(index_location :pointer)
	(index_length :pointer)
	(frequencies_location :pointer)
	(frequencies_length :pointer)
	(huffman_nodes :pointer)
	(huffman_root :pointer)
	(zio_start_location :pointer)
	(zio_end_location :pointer)
	(index_base :pointer)
	(is_ebnet :int))

(cffi:defcfun ("zio_initialize_library" zio_initialize_library) :int)

(cffi:defcfun ("zio_finalize_library" zio_finalize_library) :void)

(cffi:defcfun ("zio_initialize" zio_initialize) :void
  (zio :pointer))

(cffi:defcfun ("zio_finalize" zio_finalize) :void
  (zio :pointer))

(cffi:defcfun ("zio_set_sebxa_mode" zio_set_sebxa_mode) :int
  (zio :pointer)
  (index_location :pointer)
  (index_base :pointer)
  (zio_start_location :pointer)
  (zio_end_location :pointer))

(cffi:defcfun ("zio_open" zio_open) :int
  (zio :pointer)
  (file_name :string)
  (zio_code :int))

(cffi:defcfun ("zio_close" zio_close) :void
  (zio :pointer))

(cffi:defcfun ("zio_file" zio_file) :int
  (zio :pointer))

(cffi:defcfun ("zio_mode" zio_mode) :int
  (zio :pointer))

(cffi:defcfun ("zio_lseek" zio_lseek) :pointer
  (zio :pointer)
  (offset :pointer)
  (whence :int))

(cffi:defcfun ("zio_read" zio_read) :pointer
  (zio :pointer)
  (buffer :string)
  (length :pointer))



;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.0
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cl:defconstant EB_SUCCESS 0)

(cl:defconstant EB_ERR_MEMORY_EXHAUSTED 1)

(cl:defconstant EB_ERR_EMPTY_FILE_NAME 2)

(cl:defconstant EB_ERR_TOO_LONG_FILE_NAME 3)

(cl:defconstant EB_ERR_BAD_FILE_NAME 4)

(cl:defconstant EB_ERR_BAD_DIR_NAME 5)

(cl:defconstant EB_ERR_TOO_LONG_WORD 6)

(cl:defconstant EB_ERR_BAD_WORD 7)

(cl:defconstant EB_ERR_EMPTY_WORD 8)

(cl:defconstant EB_ERR_FAIL_GETCWD 9)

(cl:defconstant EB_ERR_FAIL_OPEN_CAT 10)

(cl:defconstant EB_ERR_FAIL_OPEN_CATAPP 11)

(cl:defconstant EB_ERR_FAIL_OPEN_TEXT 12)

(cl:defconstant EB_ERR_FAIL_OPEN_FONT 13)

(cl:defconstant EB_ERR_FAIL_OPEN_APP 14)

(cl:defconstant EB_ERR_FAIL_OPEN_BINARY 15)

(cl:defconstant EB_ERR_FAIL_READ_CAT 16)

(cl:defconstant EB_ERR_FAIL_READ_CATAPP 17)

(cl:defconstant EB_ERR_FAIL_READ_TEXT 18)

(cl:defconstant EB_ERR_FAIL_READ_FONT 19)

(cl:defconstant EB_ERR_FAIL_READ_APP 20)

(cl:defconstant EB_ERR_FAIL_READ_BINARY 21)

(cl:defconstant EB_ERR_FAIL_SEEK_CAT 22)

(cl:defconstant EB_ERR_FAIL_SEEK_CATAPP 23)

(cl:defconstant EB_ERR_FAIL_SEEK_TEXT 24)

(cl:defconstant EB_ERR_FAIL_SEEK_FONT 25)

(cl:defconstant EB_ERR_FAIL_SEEK_APP 26)

(cl:defconstant EB_ERR_FAIL_SEEK_BINARY 27)

(cl:defconstant EB_ERR_UNEXP_CAT 28)

(cl:defconstant EB_ERR_UNEXP_CATAPP 29)

(cl:defconstant EB_ERR_UNEXP_TEXT 30)

(cl:defconstant EB_ERR_UNEXP_FONT 31)

(cl:defconstant EB_ERR_UNEXP_APP 32)

(cl:defconstant EB_ERR_UNEXP_BINARY 33)

(cl:defconstant EB_ERR_UNBOUND_BOOK 34)

(cl:defconstant EB_ERR_UNBOUND_APP 35)

(cl:defconstant EB_ERR_NO_SUB 36)

(cl:defconstant EB_ERR_NO_APPSUB 37)

(cl:defconstant EB_ERR_NO_FONT 38)

(cl:defconstant EB_ERR_NO_TEXT 39)

(cl:defconstant EB_ERR_NO_STOPCODE 40)

(cl:defconstant EB_ERR_NO_ALT 41)

(cl:defconstant EB_ERR_NO_CUR_SUB 42)

(cl:defconstant EB_ERR_NO_CUR_APPSUB 43)

(cl:defconstant EB_ERR_NO_CUR_FONT 44)

(cl:defconstant EB_ERR_NO_CUR_BINARY 45)

(cl:defconstant EB_ERR_NO_SUCH_SUB 46)

(cl:defconstant EB_ERR_NO_SUCH_APPSUB 47)

(cl:defconstant EB_ERR_NO_SUCH_FONT 48)

(cl:defconstant EB_ERR_NO_SUCH_CHAR_BMP 49)

(cl:defconstant EB_ERR_NO_SUCH_CHAR_TEXT 50)

(cl:defconstant EB_ERR_NO_SUCH_SEARCH 51)

(cl:defconstant EB_ERR_NO_SUCH_HOOK 52)

(cl:defconstant EB_ERR_NO_SUCH_BINARY 53)

(cl:defconstant EB_ERR_DIFF_CONTENT 54)

(cl:defconstant EB_ERR_NO_PREV_SEARCH 55)

(cl:defconstant EB_ERR_NO_SUCH_MULTI_ID 56)

(cl:defconstant EB_ERR_NO_SUCH_ENTRY_ID 57)

(cl:defconstant EB_ERR_TOO_MANY_WORDS 58)

(cl:defconstant EB_ERR_NO_WORD 59)

(cl:defconstant EB_ERR_NO_CANDIDATES 60)

(cl:defconstant EB_ERR_END_OF_CONTENT 61)

(cl:defconstant EB_ERR_NO_PREV_SEEK 62)

(cl:defconstant EB_ERR_EBNET_UNSUPPORTED 63)

(cl:defconstant EB_ERR_EBNET_FAIL_CONNECT 64)

(cl:defconstant EB_ERR_EBNET_SERVER_BUSY 65)

(cl:defconstant EB_ERR_EBNET_NO_PERMISSION 66)

(cl:defconstant EB_ERR_UNBOUND_BOOKLIST 67)

(cl:defconstant EB_ERR_NO_SUCH_BOOK 68)

(cl:defconstant EB_NUMBER_OF_ERRORS 69)

(cl:defconstant EB_MAX_ERROR_MESSAGE_LENGTH 127)

(cffi:defcfun ("eb_error_string" eb_error_string) :string
  (error_code :pointer))

(cffi:defcfun ("eb_error_message" eb_error_message) :string
  (error_code :pointer))



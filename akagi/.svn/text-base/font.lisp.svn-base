;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.0
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cl:defconstant EB_FONT_16 0)

(cl:defconstant EB_FONT_24 1)

(cl:defconstant EB_FONT_30 2)

(cl:defconstant EB_FONT_48 3)

(cl:defconstant EB_FONT_INVALID -1)

(cl:defconstant EB_SIZE_NARROW_FONT_16 16)

(cl:defconstant EB_SIZE_WIDE_FONT_16 32)

(cl:defconstant EB_SIZE_NARROW_FONT_24 48)

(cl:defconstant EB_SIZE_WIDE_FONT_24 72)

(cl:defconstant EB_SIZE_NARROW_FONT_30 60)

(cl:defconstant EB_SIZE_WIDE_FONT_30 120)

(cl:defconstant EB_SIZE_NARROW_FONT_48 144)

(cl:defconstant EB_SIZE_WIDE_FONT_48 288)

(cl:defconstant EB_WIDTH_NARROW_FONT_16 8)

(cl:defconstant EB_WIDTH_WIDE_FONT_16 16)

(cl:defconstant EB_WIDTH_NARROW_FONT_24 16)

(cl:defconstant EB_WIDTH_WIDE_FONT_24 24)

(cl:defconstant EB_WIDTH_NARROW_FONT_30 16)

(cl:defconstant EB_WIDTH_WIDE_FONT_30 32)

(cl:defconstant EB_WIDTH_NARROW_FONT_48 24)

(cl:defconstant EB_WIDTH_WIDE_FONT_48 48)

(cl:defconstant EB_HEIGHT_FONT_16 16)

(cl:defconstant EB_HEIGHT_FONT_24 24)

(cl:defconstant EB_HEIGHT_FONT_30 30)

(cl:defconstant EB_HEIGHT_FONT_48 48)

(cl:defconstant EB_SIZE_NARROW_FONT_16_XBM 184)

(cl:defconstant EB_SIZE_WIDE_FONT_16_XBM 284)

(cl:defconstant EB_SIZE_NARROW_FONT_16_XPM 266)

(cl:defconstant EB_SIZE_WIDE_FONT_16_XPM 395)

(cl:defconstant EB_SIZE_NARROW_FONT_16_GIF 186)

(cl:defconstant EB_SIZE_WIDE_FONT_16_GIF 314)

(cl:defconstant EB_SIZE_NARROW_FONT_16_BMP 126)

(cl:defconstant EB_SIZE_WIDE_FONT_16_BMP 126)

(cl:defconstant EB_SIZE_NARROW_FONT_16_PNG 131)

(cl:defconstant EB_SIZE_WIDE_FONT_16_PNG 147)

(cl:defconstant EB_SIZE_NARROW_FONT_24_XBM 383)

(cl:defconstant EB_SIZE_WIDE_FONT_24_XBM 533)

(cl:defconstant EB_SIZE_NARROW_FONT_24_XPM 555)

(cl:defconstant EB_SIZE_WIDE_FONT_24_XPM 747)

(cl:defconstant EB_SIZE_NARROW_FONT_24_GIF 450)

(cl:defconstant EB_SIZE_WIDE_FONT_24_GIF 642)

(cl:defconstant EB_SIZE_NARROW_FONT_24_BMP 158)

(cl:defconstant EB_SIZE_WIDE_FONT_24_BMP 158)

(cl:defconstant EB_SIZE_NARROW_FONT_24_PNG 171)

(cl:defconstant EB_SIZE_WIDE_FONT_24_PNG 195)

(cl:defconstant EB_SIZE_NARROW_FONT_30_XBM 458)

(cl:defconstant EB_SIZE_WIDE_FONT_30_XBM 833)

(cl:defconstant EB_SIZE_NARROW_FONT_30_XPM 675)

(cl:defconstant EB_SIZE_WIDE_FONT_30_XPM 1155)

(cl:defconstant EB_SIZE_NARROW_FONT_30_GIF 552)

(cl:defconstant EB_SIZE_WIDE_FONT_30_GIF 1032)

(cl:defconstant EB_SIZE_NARROW_FONT_30_BMP 182)

(cl:defconstant EB_SIZE_WIDE_FONT_30_BMP 182)

(cl:defconstant EB_SIZE_NARROW_FONT_30_PNG 189)

(cl:defconstant EB_SIZE_WIDE_FONT_30_PNG 249)

(cl:defconstant EB_SIZE_NARROW_FONT_48_XBM 983)

(cl:defconstant EB_SIZE_WIDE_FONT_48_XBM 1883)

(cl:defconstant EB_SIZE_NARROW_FONT_48_XPM 1419)

(cl:defconstant EB_SIZE_WIDE_FONT_48_XPM 2571)

(cl:defconstant EB_SIZE_NARROW_FONT_48_GIF 1242)

(cl:defconstant EB_SIZE_WIDE_FONT_48_GIF 2394)

(cl:defconstant EB_SIZE_NARROW_FONT_48_BMP 254)

(cl:defconstant EB_SIZE_WIDE_FONT_48_BMP 446)

(cl:defconstant EB_SIZE_NARROW_FONT_48_PNG 291)

(cl:defconstant EB_SIZE_WIDE_FONT_48_PNG 435)

(cl:defconstant EB_SIZE_FONT_IMAGE 2571)

(cffi:defcfun ("eb_narrow_font_xbm_size" eb_narrow_font_xbm_size) :pointer
  (font_code :pointer)
  (size :pointer))

(cffi:defcfun ("eb_narrow_font_xpm_size" eb_narrow_font_xpm_size) :pointer
  (font_code :pointer)
  (size :pointer))

(cffi:defcfun ("eb_narrow_font_gif_size" eb_narrow_font_gif_size) :pointer
  (font_code :pointer)
  (size :pointer))

(cffi:defcfun ("eb_narrow_font_bmp_size" eb_narrow_font_bmp_size) :pointer
  (font_code :pointer)
  (size :pointer))

(cffi:defcfun ("eb_narrow_font_png_size" eb_narrow_font_png_size) :pointer
  (font_code :pointer)
  (size :pointer))

(cffi:defcfun ("eb_wide_font_xbm_size" eb_wide_font_xbm_size) :pointer
  (font_code :pointer)
  (size :pointer))

(cffi:defcfun ("eb_wide_font_xpm_size" eb_wide_font_xpm_size) :pointer
  (font_code :pointer)
  (size :pointer))

(cffi:defcfun ("eb_wide_font_gif_size" eb_wide_font_gif_size) :pointer
  (font_code :pointer)
  (size :pointer))

(cffi:defcfun ("eb_wide_font_bmp_size" eb_wide_font_bmp_size) :pointer
  (font_code :pointer)
  (size :pointer))

(cffi:defcfun ("eb_wide_font_png_size" eb_wide_font_png_size) :pointer
  (font_code :pointer)
  (size :pointer))

(cffi:defcfun ("eb_bitmap_to_xbm" eb_bitmap_to_xbm) :pointer
  (bitmap :string)
  (width :int)
  (height :int)
  (xbm :string)
  (xbm_length :pointer))

(cffi:defcfun ("eb_bitmap_to_xpm" eb_bitmap_to_xpm) :pointer
  (bitmap :string)
  (width :int)
  (height :int)
  (xpm :string)
  (xpm_length :pointer))

(cffi:defcfun ("eb_bitmap_to_gif" eb_bitmap_to_gif) :pointer
  (bitmap :string)
  (width :int)
  (height :int)
  (gif :string)
  (gif_length :pointer))

(cffi:defcfun ("eb_bitmap_to_bmp" eb_bitmap_to_bmp) :pointer
  (bitmap :string)
  (width :int)
  (height :int)
  (bmp :string)
  (bmp_length :pointer))

(cffi:defcfun ("eb_bitmap_to_png" eb_bitmap_to_png) :pointer
  (bitmap :string)
  (width :int)
  (height :int)
  (png :string)
  (png_length :pointer))

(cffi:defcfun ("eb_font" eb_font) :pointer
  (book :pointer)
  (font_code :pointer))

(cffi:defcfun ("eb_set_font" eb_set_font) :pointer
  (book :pointer)
  (font_code :pointer))

(cffi:defcfun ("eb_unset_font" eb_unset_font) :void
  (book :pointer))

(cffi:defcfun ("eb_font_list" eb_font_list) :pointer
  (book :pointer)
  (font_list :pointer)
  (font_count :pointer))

(cffi:defcfun ("eb_have_font" eb_have_font) :int
  (book :pointer)
  (font_code :pointer))

(cffi:defcfun ("eb_font_height" eb_font_height) :pointer
  (book :pointer)
  (height :pointer))

(cffi:defcfun ("eb_font_height2" eb_font_height2) :pointer
  (font_code :pointer)
  (height :pointer))

(cffi:defcfun ("eb_have_narrow_font" eb_have_narrow_font) :int
  (book :pointer))

(cffi:defcfun ("eb_narrow_font_width" eb_narrow_font_width) :pointer
  (book :pointer)
  (width :pointer))

(cffi:defcfun ("eb_narrow_font_width2" eb_narrow_font_width2) :pointer
  (font_code :pointer)
  (width :pointer))

(cffi:defcfun ("eb_narrow_font_size" eb_narrow_font_size) :pointer
  (book :pointer)
  (size :pointer))

(cffi:defcfun ("eb_narrow_font_size2" eb_narrow_font_size2) :pointer
  (font_code :pointer)
  (size :pointer))

(cffi:defcfun ("eb_narrow_font_start" eb_narrow_font_start) :pointer
  (book :pointer)
  (start :pointer))

(cffi:defcfun ("eb_narrow_font_end" eb_narrow_font_end) :pointer
  (book :pointer)
  (end :pointer))

(cffi:defcfun ("eb_narrow_font_character_bitmap" eb_narrow_font_character_bitmap) :pointer
  (book :pointer)
  (arg1 :int)
  (arg2 :string))

(cffi:defcfun ("eb_forward_narrow_font_character" eb_forward_narrow_font_character) :pointer
  (book :pointer)
  (arg1 :int)
  (arg2 :pointer))

(cffi:defcfun ("eb_backward_narrow_font_character" eb_backward_narrow_font_character) :pointer
  (book :pointer)
  (arg1 :int)
  (arg2 :pointer))

(cffi:defcfun ("eb_have_wide_font" eb_have_wide_font) :int
  (book :pointer))

(cffi:defcfun ("eb_wide_font_width" eb_wide_font_width) :pointer
  (book :pointer)
  (width :pointer))

(cffi:defcfun ("eb_wide_font_width2" eb_wide_font_width2) :pointer
  (font_code :pointer)
  (width :pointer))

(cffi:defcfun ("eb_wide_font_size" eb_wide_font_size) :pointer
  (book :pointer)
  (size :pointer))

(cffi:defcfun ("eb_wide_font_size2" eb_wide_font_size2) :pointer
  (font_code :pointer)
  (size :pointer))

(cffi:defcfun ("eb_wide_font_start" eb_wide_font_start) :pointer
  (book :pointer)
  (start :pointer))

(cffi:defcfun ("eb_wide_font_end" eb_wide_font_end) :pointer
  (book :pointer)
  (end :pointer))

(cffi:defcfun ("eb_wide_font_character_bitmap" eb_wide_font_character_bitmap) :pointer
  (book :pointer)
  (character_number :int)
  (bitmap :string))

(cffi:defcfun ("eb_forward_wide_font_character" eb_forward_wide_font_character) :pointer
  (book :pointer)
  (n :int)
  (character_number :pointer))

(cffi:defcfun ("eb_backward_wide_font_character" eb_backward_wide_font_character) :pointer
  (book :pointer)
  (n :int)
  (character_number :pointer))


